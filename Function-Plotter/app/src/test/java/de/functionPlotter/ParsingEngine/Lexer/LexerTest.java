package de.functionPlotter.ParsingEngine.Lexer;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class LexerTest {

    // Test cases for the Tokenizer class, generated by AI

    @Test
    void testSimpleExpression() {
        Lexer lexer = new Lexer();
        List<Token> tokens = lexer.tokenize("2+3");
        assertEquals(TokenType.NUMBER, tokens.get(0).type());
        assertEquals("2", tokens.get(0).text());
        assertEquals(TokenType.PLUS, tokens.get(1).type());
        assertEquals(TokenType.NUMBER, tokens.get(2).type());
        assertEquals("3", tokens.get(2).text());
        assertEquals(TokenType.EOF, tokens.get(3).type());
    }

    @Test
    void testWhitespaceAndIdentifiers() {
        Lexer lexer = new Lexer();
        List<Token> tokens = lexer.tokenize("x1 + y_2");
        assertEquals(TokenType.IDENTIFIER, tokens.get(0).type());
        assertEquals("x1", tokens.get(0).text());
        assertEquals(TokenType.PLUS, tokens.get(1).type());
        assertEquals(TokenType.IDENTIFIER, tokens.get(2).type());
        assertEquals("y_2", tokens.get(2).text());
        assertEquals(TokenType.EOF, tokens.get(3).type());
    }

    @Test
    void testParenthesesAndOperators() {
        Lexer lexer = new Lexer();
        List<Token> tokens = lexer.tokenize("(a-b)*4.5^z");
        assertEquals(TokenType.OPENPARENTHESIS, tokens.get(0).type());
        assertEquals(TokenType.IDENTIFIER, tokens.get(1).type());
        assertEquals(TokenType.MINUS, tokens.get(2).type());
        assertEquals(TokenType.IDENTIFIER, tokens.get(3).type());
        assertEquals(TokenType.CLOSEPARENTHESIS, tokens.get(4).type());
        assertEquals(TokenType.MULTIPLY, tokens.get(5).type());
        assertEquals(TokenType.NUMBER, tokens.get(6).type());
        assertEquals("4.5", tokens.get(6).text());
        assertEquals(TokenType.EXPONENT, tokens.get(7).type());
        assertEquals(TokenType.IDENTIFIER, tokens.get(8).type());
        assertEquals("z", tokens.get(8).text());
        assertEquals(TokenType.EOF, tokens.get(9).type());
    }

    @Test
    void testFunctionCall() {
        Lexer lexer = new Lexer();
        List<Token> tokens = lexer.tokenize("sin(x) + log(10, 2)");
        assertEquals(TokenType.FUNCTION, tokens.get(0).type());
        assertEquals("sin", tokens.get(0).text());
        assertEquals(TokenType.OPENPARENTHESIS, tokens.get(1).type());
        assertEquals(TokenType.IDENTIFIER, tokens.get(2).type());
        assertEquals("x", tokens.get(2).text());
        assertEquals(TokenType.CLOSEPARENTHESIS, tokens.get(3).type());
        assertEquals(TokenType.PLUS, tokens.get(4).type());
        assertEquals(TokenType.FUNCTION, tokens.get(5).type());
        assertEquals("log", tokens.get(5).text());
        assertEquals(TokenType.OPENPARENTHESIS, tokens.get(6).type());
        assertEquals(TokenType.NUMBER, tokens.get(7).type());
        assertEquals("10", tokens.get(7).text());
        assertEquals(TokenType.COMMA, tokens.get(8).type());
        assertEquals(TokenType.NUMBER, tokens.get(9).type());
        assertEquals("2", tokens.get(9).text());
        assertEquals(TokenType.CLOSEPARENTHESIS, tokens.get(10).type());
        assertEquals(TokenType.EOF, tokens.get(11).type());
    }

    @Test
    void testUnknownCharacter() {
        Lexer lexer = new Lexer();
        assertThrows(RuntimeException.class, () -> lexer.tokenize("2$3"));
    }
}